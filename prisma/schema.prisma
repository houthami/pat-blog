// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  email         String    @unique
  password      String?   // Made optional for OAuth users
  name          String?
  emailVerified DateTime?
  image         String?
  role          UserRole  @default(VIEWER)
  twoFactorEnabled Boolean @default(false)
  twoFactorSecret String?
  backupCodes   String?   // JSON array of backup codes
  lastLogin     DateTime?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Relationships
  recipes       Recipe[]
  accounts      Account[]
  sessions      Session[]
  auditLogs     AuditLog[]
  ownedSites    Site[]    @relation("SiteOwner") // Sites owned by this user
  blogs         Blog[]    // Blogs created by user

  // Advanced feature relationships
  shoppingLists     ShoppingList[]
  mealPlans         MealPlan[]
  recipeCollections RecipeCollection[]

  @@map("users")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  ipAddress    String?
  userAgent    String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

model AuditLog {
  id        String   @id @default(cuid())
  userId    String?
  action    String   // LOGIN, LOGOUT, PASSWORD_CHANGE, MFA_ENABLED, etc.
  details   Json?    // Additional context
  ipAddress String?
  userAgent String?
  success   Boolean  @default(true)
  createdAt DateTime @default(now())

  user User? @relation(fields: [userId], references: [id], onDelete: SetNull)

  @@map("audit_logs")
}

enum UserRole {
  PLATFORM_ADMIN  // Can manage the entire platform
  SITE_OWNER      // Owns and admin their own site/blog
  VIEWER          // Can view and interact with content
}

enum RecipeStatus {
  DRAFT       // Editors create as draft, only author can see
  PUBLISHED   // Live on the site, everyone can see
  SUSPENDED   // Hidden from public, only admin can see
}

model Recipe {
  id          String      @id @default(cuid())
  title       String
  description String?
  ingredients String      // JSON string of ingredients array
  instructions String     // JSON string of instructions array
  imageUrl    String?
  status      RecipeStatus @default(DRAFT)

  // Recipe metadata
  servings    Int?        // Number of servings
  prepTime    Int?        // Prep time in minutes
  cookTime    Int?        // Cook time in minutes
  difficulty  String?     // "easy", "medium", "hard"
  cuisine     String?     // "italian", "mexican", "asian", etc.
  mealType    String[]    // ["breakfast", "lunch", "dinner", "snack", "dessert"]

  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  publishedAt DateTime?   // When recipe was published
  suspendedAt DateTime?   // When recipe was suspended
  suspendedBy String?     // User ID who suspended it

  authorId    String
  author      User        @relation(fields: [authorId], references: [id], onDelete: Cascade)

  // Analytics relationships
  views       RecipeView[]
  interactions RecipeInteraction[]
  revenues    RecipeRevenue[]
  comments    RecipeComment[]

  // Advanced feature relationships
  shoppingListItems ShoppingListItem[]
  shoppingLists     ShoppingList[]   @relation("RecipeShoppingLists")
  affiliateLinks    AffiliateLink[]  @relation("RecipeAffiliateLinks")

  // Meal planning relationships
  breakfastMeals    MealPlanDay[]    @relation("BreakfastMeals")
  lunchMeals        MealPlanDay[]    @relation("LunchMeals")
  dinnerMeals       MealPlanDay[]    @relation("DinnerMeals")
  snackMeals        MealPlanDay[]    @relation("SnackMeals")

  // Collections and scaling
  collections       RecipeCollection[] @relation("CollectionRecipes")
  nutrition         RecipeNutrition?
  scalings          RecipeScaling[]

  @@map("recipes")
}

model RecipeView {
  id        String   @id @default(cuid())
  recipeId  String
  recipe    Recipe   @relation(fields: [recipeId], references: [id], onDelete: Cascade)
  
  // Visitor Info
  visitorId String   // Anonymous visitor ID (cookie-based)
  ipAddress String?
  userAgent String?
  
  // Location Data
  country   String?
  city      String?
  region    String?
  timezone  String?
  
  // Engagement Metrics
  timeSpent Int      @default(0) // seconds spent on page
  scrollDepth Float  @default(0) // percentage of page scrolled
  bounced   Boolean  @default(true) // did user leave immediately
  
  // Referral Data
  referrer  String?
  source    String?  // organic, social, direct, email, etc.
  medium    String?  // search, social, referral, etc.
  campaign  String? // utm_campaign parameter
  
  viewedAt  DateTime @default(now())
  
  @@map("recipe_views")
}

model RecipeInteraction {
  id        String   @id @default(cuid())
  recipeId  String
  recipe    Recipe   @relation(fields: [recipeId], references: [id], onDelete: Cascade)

  visitorId String
  type      String   // "like", "dislike", "share", "print", "save", "copy_ingredients", "copy_url"
  value     String?  // additional data (e.g., social platform for shares)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Ensure one interaction per visitor per type per recipe
  @@unique([visitorId, recipeId, type])
  @@map("recipe_interactions")
}

model RecipeComment {
  id        String   @id @default(cuid())
  recipeId  String
  recipe    Recipe   @relation(fields: [recipeId], references: [id], onDelete: Cascade)

  // Visitor Info
  visitorId String
  name      String   // Display name for the comment
  email     String?  // Optional email (not displayed publicly)

  // Comment Content
  content   String   // The actual comment text
  rating    Int?     // Optional 1-5 star rating

  // Moderation
  approved  Boolean  @default(false) // Comments need approval
  flagged   Boolean  @default(false) // User reported comments

  // Analytics
  ipAddress String?
  userAgent String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("recipe_comments")
}

model RecipeRevenue {
  id        String   @id @default(cuid())
  recipeId  String
  recipe    Recipe   @relation(fields: [recipeId], references: [id], onDelete: Cascade)
  
  // Revenue Sources
  source    String   // "affiliate", "ads", "premium", "cookbook", "course"
  amount    Float    // revenue amount in cents
  currency  String   @default("USD")
  
  // Attribution
  visitorId String?
  country   String?
  
  // Tracking
  transactionId String?
  platform     String? // "amazon", "google_ads", "direct", etc.
  
  createdAt DateTime @default(now())
  
  @@map("recipe_revenues")
}

model VisitorSession {
  id        String   @id @default(cuid())
  visitorId String   @unique

  // Device & Browser
  device    String?  // mobile, desktop, tablet
  browser   String?  // chrome, firefox, safari
  os        String?  // windows, macos, ios, android

  // Location (from IP)
  country   String?
  city      String?
  region    String?
  latitude  Float?
  longitude Float?

  // Session Data
  firstSeen DateTime @default(now())
  lastSeen  DateTime @default(now())
  pageViews Int      @default(0)
  totalTime Int      @default(0) // total seconds spent on site

  @@map("visitor_sessions")
}

// Advanced Features Models

model ShoppingList {
  id        String   @id @default(cuid())
  name      String
  userId    String?  // Optional - can be anonymous
  visitorId String?  // For anonymous users

  // Shopping list data
  items     ShoppingListItem[]
  totalCost Float?   @default(0)
  store     String?  // Target store for shopping

  // Recipe association
  recipes   Recipe[] @relation("RecipeShoppingLists")

  // Meal plan association
  mealPlans MealPlan[]

  // Metadata
  isPublic  Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User? @relation(fields: [userId], references: [id], onDelete: SetNull)

  @@map("shopping_lists")
}

model ShoppingListItem {
  id             String      @id @default(cuid())
  shoppingListId String
  shoppingList   ShoppingList @relation(fields: [shoppingListId], references: [id], onDelete: Cascade)

  // Item details
  ingredient     String
  amount         String
  unit           String?
  category       String      @default("other") // produce, meat, dairy, pantry, etc.

  // Shopping data
  price          Float?
  currency       String      @default("USD")
  checked        Boolean     @default(false)

  // Affiliate & Store data
  affiliateLink  AffiliateLink? @relation(fields: [affiliateLinkId], references: [id])
  affiliateLinkId String?

  // Recipe association
  recipeId       String?
  recipe         Recipe?     @relation(fields: [recipeId], references: [id], onDelete: SetNull)

  createdAt      DateTime    @default(now())
  updatedAt      DateTime    @updatedAt

  @@map("shopping_list_items")
}

model AffiliateLink {
  id          String   @id @default(cuid())

  // Product info
  productName String
  productId   String?  // External product ID
  imageUrl    String?

  // Affiliate data
  affiliateUrl String
  provider     String   // "amazon", "instacart", "williams-sonoma", etc.
  commission   Float?   // Commission rate (0.04 = 4%)

  // Tracking
  clickCount   Int      @default(0)
  conversionCount Int   @default(0)
  revenue      Float    @default(0)

  // Category & targeting
  categories   String[] // ["kitchen-tools", "ingredients", "cookbooks"]
  keywords     String[] // For matching ingredients

  // Recipe associations
  recipes      Recipe[] @relation("RecipeAffiliateLinks")
  shoppingItems ShoppingListItem[]

  // Status
  isActive     Boolean  @default(true)
  expiresAt    DateTime?

  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@index([provider, isActive])
  @@map("affiliate_links")
}

model MealPlan {
  id        String   @id @default(cuid())
  name      String
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  // Plan details
  weekStart DateTime // Start of the week for this plan
  weekEnd   DateTime
  servings  Int      @default(4)

  // Meals
  meals     MealPlanDay[]

  // Shopping & nutrition
  shoppingList ShoppingList? @relation(fields: [shoppingListId], references: [id])
  shoppingListId String?
  totalCost    Float?
  totalCalories Int?

  // Metadata
  isTemplate   Boolean  @default(false)
  isPublic     Boolean  @default(false)
  tags         String[] // ["vegetarian", "budget-friendly", "quick"]

  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@map("meal_plans")
}

model MealPlanDay {
  id         String   @id @default(cuid())
  mealPlanId String
  mealPlan   MealPlan @relation(fields: [mealPlanId], references: [id], onDelete: Cascade)

  // Day info
  dayOfWeek  Int      // 0 = Sunday, 1 = Monday, etc.
  date       DateTime

  // Meals
  breakfast  Recipe?  @relation("BreakfastMeals", fields: [breakfastId], references: [id])
  breakfastId String?

  lunch      Recipe?  @relation("LunchMeals", fields: [lunchId], references: [id])
  lunchId    String?

  dinner     Recipe?  @relation("DinnerMeals", fields: [dinnerId], references: [id])
  dinnerId   String?

  snacks     Recipe[] @relation("SnackMeals")

  // Nutrition summary for the day
  totalCalories Int?
  totalCost     Float?

  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@map("meal_plan_days")
}

model RecipeCollection {
  id          String   @id @default(cuid())
  name        String
  description String?
  imageUrl    String?

  // Creator
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  // Collection data
  recipes     Recipe[] @relation("CollectionRecipes")

  // Metadata
  isPublic    Boolean  @default(false)
  isPremium   Boolean  @default(false)
  price       Float?   // If selling the collection

  // Analytics
  viewCount   Int      @default(0)
  saveCount   Int      @default(0)

  tags        String[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("recipe_collections")
}

model RecipeNutrition {
  id        String @id @default(cuid())
  recipeId  String @unique
  recipe    Recipe @relation(fields: [recipeId], references: [id], onDelete: Cascade)

  // Per serving nutrition
  servingSize   String?  // "1 cup", "1 slice", etc.
  calories      Int?
  protein       Float?   // grams
  carbs         Float?   // grams
  fat           Float?   // grams
  fiber         Float?   // grams
  sugar         Float?   // grams
  sodium        Float?   // mg

  // Vitamins & minerals (optional)
  vitaminA      Float?   // mcg
  vitaminC      Float?   // mg
  calcium       Float?   // mg
  iron          Float?   // mg

  // Dietary info
  isVegetarian  Boolean  @default(false)
  isVegan       Boolean  @default(false)
  isGlutenFree  Boolean  @default(false)
  isDairyFree   Boolean  @default(false)
  isKeto        Boolean  @default(false)
  isPaleo       Boolean  @default(false)

  // Data source
  dataSource    String?  // "manual", "spoonacular", "usda", etc.
  lastUpdated   DateTime @updatedAt

  @@map("recipe_nutrition")
}

model RecipeScaling {
  id                String @id @default(cuid())
  recipeId          String
  recipe            Recipe @relation(fields: [recipeId], references: [id], onDelete: Cascade)

  originalServings  Int
  targetServings    Int
  scaleFactor       Float

  // Scaled ingredients (JSON)
  scaledIngredients Json   // Scaled ingredient amounts
  scaledInstructions Json? // Optional scaled cooking times

  // User association
  userId            String?
  visitorId         String?

  createdAt         DateTime @default(now())

  @@map("recipe_scalings")
}

// Multi-Tenant Site Models
enum SiteStatus {
  ACTIVE      // Site is active and live
  SUSPENDED   // Site is temporarily suspended
  PENDING     // Site is pending approval
  ARCHIVED    // Site is archived
}

model Site {
  id          String     @id @default(cuid())
  name        String     // Display name "My Pastry Blog"
  slug        String     @unique // URL slug "my-pastry-blog"
  subdomain   String     @unique // Subdomain "pastry" for pastry.yourdomain.com
  customDomain String?   @unique // Optional custom domain "myblog.com"
  description String?
  status      SiteStatus @default(PENDING)

  // Site Owner
  ownerId     String
  owner       User       @relation("SiteOwner", fields: [ownerId], references: [id], onDelete: Cascade)

  // Site Customization
  theme       String     @default("default") // Theme identifier
  logoUrl     String?
  favicon     String?
  primaryColor String?   @default("#3b82f6") // Brand color

  // Site Settings
  isPublic    Boolean    @default(true)
  allowComments Boolean  @default(true)
  allowRegistration Boolean @default(false) // Allow users to join this site

  // SEO Settings
  metaTitle       String?
  metaDescription String?
  keywords        String[]

  // Site Category/Niche
  category        String   // "pastry", "sewing", "tech", "lifestyle", etc.
  tags            String[] // Additional tags

  // Analytics
  totalViews      Int      @default(0)
  totalPosts      Int      @default(0)
  totalSubscribers Int     @default(0)

  // Relationships
  blogs           Blog[]   // Blog posts on this site

  // Timestamps
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  launchedAt      DateTime? // When site went live

  @@index([ownerId])
  @@index([status])
  @@index([category])
  @@index([subdomain])
  @@map("sites")
}

// Blog Management Models
enum BlogStatus {
  DRAFT       // Blog is in draft mode
  PUBLISHED   // Blog is live and visible to viewers
  SUSPENDED   // Blog is temporarily hidden
  ARCHIVED    // Blog is archived but kept for reference
}

model Blog {
  id          String     @id @default(cuid())
  title       String
  description String?
  content     String     // Rich text content (HTML/Markdown)
  slug        String     // URL-friendly identifier (unique per site)
  imageUrl    String?    // Featured image
  status      BlogStatus @default(DRAFT)

  // Site Association
  siteId      String
  site        Site       @relation(fields: [siteId], references: [id], onDelete: Cascade)

  // SEO & Metadata
  metaTitle       String?
  metaDescription String?
  keywords        String[] // SEO keywords

  // Publishing Info
  publishedAt     DateTime?
  scheduledAt     DateTime? // For scheduled publishing
  lastEditedAt    DateTime  @default(now())

  // Author Info
  authorId        String
  author          User      @relation(fields: [authorId], references: [id], onDelete: Cascade)

  // Blog Settings
  allowComments   Boolean   @default(true)
  allowSharing    Boolean   @default(true)
  isPrivate       Boolean   @default(false) // Private blogs only visible to author

  // Categories and Tags
  categories      String[]  // Blog categories
  tags            String[]  // Blog tags

  // Analytics
  views           BlogView[]
  interactions    BlogInteraction[]
  comments        BlogComment[]

  // Timestamps
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  @@unique([siteId, slug]) // Slug must be unique per site
  @@index([siteId])
  @@index([authorId])
  @@index([status])
  @@index([publishedAt])
  @@map("blogs")
}

model BlogView {
  id        String   @id @default(cuid())
  blogId    String
  blog      Blog     @relation(fields: [blogId], references: [id], onDelete: Cascade)

  // Visitor Info
  visitorId String   // Anonymous visitor ID
  ipAddress String?
  userAgent String?

  // Location Data
  country   String?
  city      String?
  region    String?

  // Engagement Metrics
  timeSpent   Int      @default(0) // seconds spent reading
  scrollDepth Float    @default(0) // percentage scrolled
  bounced     Boolean  @default(true)

  // Referral Data
  referrer  String?
  source    String?  // organic, social, direct, email
  medium    String?  // search, social, referral
  campaign  String? // utm_campaign

  viewedAt  DateTime @default(now())

  @@map("blog_views")
}

model BlogInteraction {
  id        String   @id @default(cuid())
  blogId    String
  blog      Blog     @relation(fields: [blogId], references: [id], onDelete: Cascade)

  visitorId String
  type      String   // "like", "dislike", "share", "bookmark", "copy_url"
  value     String?  // additional data (e.g., social platform for shares)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([visitorId, blogId, type])
  @@map("blog_interactions")
}

model BlogComment {
  id        String   @id @default(cuid())
  blogId    String
  blog      Blog     @relation(fields: [blogId], references: [id], onDelete: Cascade)

  // Visitor Info
  visitorId String
  name      String   // Display name
  email     String?  // Optional email (not displayed)

  // Comment Content
  content   String   // Comment text

  // Threading support
  parentId  String?  // For reply functionality
  parent    BlogComment? @relation("CommentReplies", fields: [parentId], references: [id], onDelete: Cascade)
  replies   BlogComment[] @relation("CommentReplies")

  // Moderation
  approved  Boolean  @default(false)
  flagged   Boolean  @default(false)

  // Analytics
  ipAddress String?
  userAgent String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("blog_comments")
}
